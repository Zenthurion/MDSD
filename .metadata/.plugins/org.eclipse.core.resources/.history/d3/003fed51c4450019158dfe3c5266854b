/*
 * generated by Xtext 2.16.0
 */
package dk.sdu.mdsd.generator

import dk.sdu.mdsd.mathInterpreter.Bracket
import dk.sdu.mdsd.mathInterpreter.Expression
import dk.sdu.mdsd.mathInterpreter.MultiplyOrDivide
import dk.sdu.mdsd.mathInterpreter.Num
import dk.sdu.mdsd.mathInterpreter.PlusOrMinus
import dk.sdu.mdsd.mathInterpreter.Solution
import dk.sdu.mdsd.mathInterpreter.Variable
import dk.sdu.mdsd.mathInterpreter.VariableRef
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MathInterpreterGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		var math = resource.allContents.filter(Solution).next
		
		println(math.variablesAsString)
		println(math.asString)
	}
	
	def String variablesAsString(Solution it) {
		var res = ""
		
		for(Variable v : variables) {
			res += v.asString + "\n"
		}
		
		return res
	}

	def dispatch String asString(Solution it) {
		return expression.asString
	}

	def dispatch String asString(Expression it) {
		return exp.asString
	}

	def dispatch String asString(PlusOrMinus it) {
		if(right === null)
			return left.asString
		else 
			return left.asString + " " + operator + " " + right.asString
	}

	def dispatch String asString(MultiplyOrDivide it) {
		if(right === null)
			return left.asString
		else 
			return left.asString + " " + operator + " " + right.asString
	}
	
	def dispatch String asString(Num it) {
		return value.toString
	}
	
	def dispatch String asString(VariableRef it) {
		return value.name
	}
	
	def dispatch String asString(Bracket it) {
		return value.asString	
	}
	
	def dispatch String asString(Variable it){
		return name + " = " + value.asString
	}
}

