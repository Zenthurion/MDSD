/*
 * generated by Xtext 2.16.0
 */
grammar InternalMathInterpreter;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package dk.sdu.mdsd.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package dk.sdu.mdsd.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import dk.sdu.mdsd.services.MathInterpreterGrammarAccess;

}
@parser::members {
	private MathInterpreterGrammarAccess grammarAccess;

	public void setGrammarAccess(MathInterpreterGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleSolution
entryRuleSolution
:
{ before(grammarAccess.getSolutionRule()); }
	 ruleSolution
{ after(grammarAccess.getSolutionRule()); } 
	 EOF 
;

// Rule Solution
ruleSolution 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSolutionAccess().getGroup()); }
		(rule__Solution__Group__0)
		{ after(grammarAccess.getSolutionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariable
entryRuleVariable
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableAccess().getGroup()); }
		(rule__Variable__Group__0)
		{ after(grammarAccess.getVariableAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getExpAssignment()); }
		(rule__Expression__ExpAssignment)
		{ after(grammarAccess.getExpressionAccess().getExpAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePlusOrMinus
entryRulePlusOrMinus
:
{ before(grammarAccess.getPlusOrMinusRule()); }
	 rulePlusOrMinus
{ after(grammarAccess.getPlusOrMinusRule()); } 
	 EOF 
;

// Rule PlusOrMinus
rulePlusOrMinus 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPlusOrMinusAccess().getGroup()); }
		(rule__PlusOrMinus__Group__0)
		{ after(grammarAccess.getPlusOrMinusAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultiplyOrDivide
entryRuleMultiplyOrDivide
:
{ before(grammarAccess.getMultiplyOrDivideRule()); }
	 ruleMultiplyOrDivide
{ after(grammarAccess.getMultiplyOrDivideRule()); } 
	 EOF 
;

// Rule MultiplyOrDivide
ruleMultiplyOrDivide 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultiplyOrDivideAccess().getGroup()); }
		(rule__MultiplyOrDivide__Group__0)
		{ after(grammarAccess.getMultiplyOrDivideAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimary
entryRulePrimary
:
{ before(grammarAccess.getPrimaryRule()); }
	 rulePrimary
{ after(grammarAccess.getPrimaryRule()); } 
	 EOF 
;

// Rule Primary
rulePrimary 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryAccess().getAlternatives()); }
		(rule__Primary__Alternatives)
		{ after(grammarAccess.getPrimaryAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPlusOrMinusAccess().getGroup_1_0()); }
		(rule__PlusOrMinus__Group_1_0__0)
		{ after(grammarAccess.getPlusOrMinusAccess().getGroup_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getPlusOrMinusAccess().getGroup_1_1()); }
		(rule__PlusOrMinus__Group_1_1__0)
		{ after(grammarAccess.getPlusOrMinusAccess().getGroup_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyOrDivide__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplyOrDivideAccess().getGroup_1_0()); }
		(rule__MultiplyOrDivide__Group_1_0__0)
		{ after(grammarAccess.getMultiplyOrDivideAccess().getGroup_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getMultiplyOrDivideAccess().getGroup_1_1()); }
		(rule__MultiplyOrDivide__Group_1_1__0)
		{ after(grammarAccess.getMultiplyOrDivideAccess().getGroup_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getGroup_0()); }
		(rule__Primary__Group_0__0)
		{ after(grammarAccess.getPrimaryAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getGroup_1()); }
		(rule__Primary__Group_1__0)
		{ after(grammarAccess.getPrimaryAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getGroup_2()); }
		(rule__Primary__Group_2__0)
		{ after(grammarAccess.getPrimaryAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Solution__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Solution__Group__0__Impl
	rule__Solution__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Solution__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSolutionAccess().getGroup_0()); }
	(rule__Solution__Group_0__0)?
	{ after(grammarAccess.getSolutionAccess().getGroup_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Solution__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Solution__Group__1__Impl
	rule__Solution__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Solution__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSolutionAccess().getSolveKeyword_1()); }
	'solve'
	{ after(grammarAccess.getSolutionAccess().getSolveKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Solution__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Solution__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Solution__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSolutionAccess().getExpressionAssignment_2()); }
	(rule__Solution__ExpressionAssignment_2)
	{ after(grammarAccess.getSolutionAccess().getExpressionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Solution__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Solution__Group_0__0__Impl
	rule__Solution__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Solution__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSolutionAccess().getGivenKeyword_0_0()); }
	'given'
	{ after(grammarAccess.getSolutionAccess().getGivenKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Solution__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Solution__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Solution__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSolutionAccess().getVariablesAssignment_0_1()); }
	(rule__Solution__VariablesAssignment_0_1)*
	{ after(grammarAccess.getSolutionAccess().getVariablesAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group__0__Impl
	rule__Variable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getNameAssignment_0()); }
	(rule__Variable__NameAssignment_0)
	{ after(grammarAccess.getVariableAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group__1__Impl
	rule__Variable__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getVariableAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getValueAssignment_2()); }
	(rule__Variable__ValueAssignment_2)
	{ after(grammarAccess.getVariableAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PlusOrMinus__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusOrMinus__Group__0__Impl
	rule__PlusOrMinus__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusOrMinusAccess().getLeftAssignment_0()); }
	(rule__PlusOrMinus__LeftAssignment_0)
	{ after(grammarAccess.getPlusOrMinusAccess().getLeftAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusOrMinus__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusOrMinusAccess().getAlternatives_1()); }
	(rule__PlusOrMinus__Alternatives_1)*
	{ after(grammarAccess.getPlusOrMinusAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PlusOrMinus__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusOrMinus__Group_1_0__0__Impl
	rule__PlusOrMinus__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusOrMinusAccess().getPlusLeftAction_1_0_0()); }
	()
	{ after(grammarAccess.getPlusOrMinusAccess().getPlusLeftAction_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusOrMinus__Group_1_0__1__Impl
	rule__PlusOrMinus__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusOrMinusAccess().getOperatorAssignment_1_0_1()); }
	(rule__PlusOrMinus__OperatorAssignment_1_0_1)
	{ after(grammarAccess.getPlusOrMinusAccess().getOperatorAssignment_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group_1_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusOrMinus__Group_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group_1_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusOrMinusAccess().getRightAssignment_1_0_2()); }
	(rule__PlusOrMinus__RightAssignment_1_0_2)
	{ after(grammarAccess.getPlusOrMinusAccess().getRightAssignment_1_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PlusOrMinus__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusOrMinus__Group_1_1__0__Impl
	rule__PlusOrMinus__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusOrMinusAccess().getMinusLeftAction_1_1_0()); }
	()
	{ after(grammarAccess.getPlusOrMinusAccess().getMinusLeftAction_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusOrMinus__Group_1_1__1__Impl
	rule__PlusOrMinus__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusOrMinusAccess().getOperatorAssignment_1_1_1()); }
	(rule__PlusOrMinus__OperatorAssignment_1_1_1)
	{ after(grammarAccess.getPlusOrMinusAccess().getOperatorAssignment_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group_1_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusOrMinus__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group_1_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusOrMinusAccess().getRightAssignment_1_1_2()); }
	(rule__PlusOrMinus__RightAssignment_1_1_2)
	{ after(grammarAccess.getPlusOrMinusAccess().getRightAssignment_1_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplyOrDivide__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplyOrDivide__Group__0__Impl
	rule__MultiplyOrDivide__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyOrDivide__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplyOrDivideAccess().getLeftAssignment_0()); }
	(rule__MultiplyOrDivide__LeftAssignment_0)
	{ after(grammarAccess.getMultiplyOrDivideAccess().getLeftAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyOrDivide__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplyOrDivide__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyOrDivide__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplyOrDivideAccess().getAlternatives_1()); }
	(rule__MultiplyOrDivide__Alternatives_1)*
	{ after(grammarAccess.getMultiplyOrDivideAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplyOrDivide__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplyOrDivide__Group_1_0__0__Impl
	rule__MultiplyOrDivide__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyOrDivide__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplyOrDivideAccess().getMultiplyLeftAction_1_0_0()); }
	()
	{ after(grammarAccess.getMultiplyOrDivideAccess().getMultiplyLeftAction_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyOrDivide__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplyOrDivide__Group_1_0__1__Impl
	rule__MultiplyOrDivide__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyOrDivide__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplyOrDivideAccess().getOperatorAssignment_1_0_1()); }
	(rule__MultiplyOrDivide__OperatorAssignment_1_0_1)
	{ after(grammarAccess.getMultiplyOrDivideAccess().getOperatorAssignment_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyOrDivide__Group_1_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplyOrDivide__Group_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyOrDivide__Group_1_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplyOrDivideAccess().getRightAssignment_1_0_2()); }
	(rule__MultiplyOrDivide__RightAssignment_1_0_2)
	{ after(grammarAccess.getMultiplyOrDivideAccess().getRightAssignment_1_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplyOrDivide__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplyOrDivide__Group_1_1__0__Impl
	rule__MultiplyOrDivide__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyOrDivide__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplyOrDivideAccess().getDivideLeftAction_1_1_0()); }
	()
	{ after(grammarAccess.getMultiplyOrDivideAccess().getDivideLeftAction_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyOrDivide__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplyOrDivide__Group_1_1__1__Impl
	rule__MultiplyOrDivide__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyOrDivide__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplyOrDivideAccess().getOperatorAssignment_1_1_1()); }
	(rule__MultiplyOrDivide__OperatorAssignment_1_1_1)
	{ after(grammarAccess.getMultiplyOrDivideAccess().getOperatorAssignment_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyOrDivide__Group_1_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplyOrDivide__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyOrDivide__Group_1_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplyOrDivideAccess().getRightAssignment_1_1_2()); }
	(rule__MultiplyOrDivide__RightAssignment_1_1_2)
	{ after(grammarAccess.getMultiplyOrDivideAccess().getRightAssignment_1_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_0__0__Impl
	rule__Primary__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getNumAction_0_0()); }
	()
	{ after(grammarAccess.getPrimaryAccess().getNumAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getValueAssignment_0_1()); }
	(rule__Primary__ValueAssignment_0_1)
	{ after(grammarAccess.getPrimaryAccess().getValueAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_1__0__Impl
	rule__Primary__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getVariableRefAction_1_0()); }
	()
	{ after(grammarAccess.getPrimaryAccess().getVariableRefAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getValueAssignment_1_1()); }
	(rule__Primary__ValueAssignment_1_1)
	{ after(grammarAccess.getPrimaryAccess().getValueAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_2__0__Impl
	rule__Primary__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getBracketAction_2_0()); }
	()
	{ after(grammarAccess.getPrimaryAccess().getBracketAction_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_2__1__Impl
	rule__Primary__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_2_1()); }
	'('
	{ after(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_2__2__Impl
	rule__Primary__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getValueAssignment_2_2()); }
	(rule__Primary__ValueAssignment_2_2)
	{ after(grammarAccess.getPrimaryAccess().getValueAssignment_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_2__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_2__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_2_3()); }
	')'
	{ after(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_2_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Solution__VariablesAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSolutionAccess().getVariablesVariableParserRuleCall_0_1_0()); }
		ruleVariable
		{ after(grammarAccess.getSolutionAccess().getVariablesVariableParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Solution__ExpressionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSolutionAccess().getExpressionExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getSolutionAccess().getExpressionExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getValueExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getVariableAccess().getValueExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__ExpAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getExpPlusOrMinusParserRuleCall_0()); }
		rulePlusOrMinus
		{ after(grammarAccess.getExpressionAccess().getExpPlusOrMinusParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__LeftAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPlusOrMinusAccess().getLeftMultiplyOrDivideParserRuleCall_0_0()); }
		ruleMultiplyOrDivide
		{ after(grammarAccess.getPlusOrMinusAccess().getLeftMultiplyOrDivideParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__OperatorAssignment_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPlusOrMinusAccess().getOperatorPlusSignKeyword_1_0_1_0()); }
		(
			{ before(grammarAccess.getPlusOrMinusAccess().getOperatorPlusSignKeyword_1_0_1_0()); }
			'+'
			{ after(grammarAccess.getPlusOrMinusAccess().getOperatorPlusSignKeyword_1_0_1_0()); }
		)
		{ after(grammarAccess.getPlusOrMinusAccess().getOperatorPlusSignKeyword_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__RightAssignment_1_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPlusOrMinusAccess().getRightMultiplyOrDivideParserRuleCall_1_0_2_0()); }
		ruleMultiplyOrDivide
		{ after(grammarAccess.getPlusOrMinusAccess().getRightMultiplyOrDivideParserRuleCall_1_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__OperatorAssignment_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPlusOrMinusAccess().getOperatorHyphenMinusKeyword_1_1_1_0()); }
		(
			{ before(grammarAccess.getPlusOrMinusAccess().getOperatorHyphenMinusKeyword_1_1_1_0()); }
			'-'
			{ after(grammarAccess.getPlusOrMinusAccess().getOperatorHyphenMinusKeyword_1_1_1_0()); }
		)
		{ after(grammarAccess.getPlusOrMinusAccess().getOperatorHyphenMinusKeyword_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__RightAssignment_1_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPlusOrMinusAccess().getRightMultiplyOrDivideParserRuleCall_1_1_2_0()); }
		ruleMultiplyOrDivide
		{ after(grammarAccess.getPlusOrMinusAccess().getRightMultiplyOrDivideParserRuleCall_1_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyOrDivide__LeftAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplyOrDivideAccess().getLeftPrimaryParserRuleCall_0_0()); }
		rulePrimary
		{ after(grammarAccess.getMultiplyOrDivideAccess().getLeftPrimaryParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyOrDivide__OperatorAssignment_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplyOrDivideAccess().getOperatorAsteriskKeyword_1_0_1_0()); }
		(
			{ before(grammarAccess.getMultiplyOrDivideAccess().getOperatorAsteriskKeyword_1_0_1_0()); }
			'*'
			{ after(grammarAccess.getMultiplyOrDivideAccess().getOperatorAsteriskKeyword_1_0_1_0()); }
		)
		{ after(grammarAccess.getMultiplyOrDivideAccess().getOperatorAsteriskKeyword_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyOrDivide__RightAssignment_1_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplyOrDivideAccess().getRightPrimaryParserRuleCall_1_0_2_0()); }
		rulePrimary
		{ after(grammarAccess.getMultiplyOrDivideAccess().getRightPrimaryParserRuleCall_1_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyOrDivide__OperatorAssignment_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplyOrDivideAccess().getOperatorSolidusKeyword_1_1_1_0()); }
		(
			{ before(grammarAccess.getMultiplyOrDivideAccess().getOperatorSolidusKeyword_1_1_1_0()); }
			'/'
			{ after(grammarAccess.getMultiplyOrDivideAccess().getOperatorSolidusKeyword_1_1_1_0()); }
		)
		{ after(grammarAccess.getMultiplyOrDivideAccess().getOperatorSolidusKeyword_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyOrDivide__RightAssignment_1_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplyOrDivideAccess().getRightPrimaryParserRuleCall_1_1_2_0()); }
		rulePrimary
		{ after(grammarAccess.getMultiplyOrDivideAccess().getRightPrimaryParserRuleCall_1_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__ValueAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getValueINTTerminalRuleCall_0_1_0()); }
		RULE_INT
		{ after(grammarAccess.getPrimaryAccess().getValueINTTerminalRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__ValueAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getValueVariableCrossReference_1_1_0()); }
		(
			{ before(grammarAccess.getPrimaryAccess().getValueVariableIDTerminalRuleCall_1_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getPrimaryAccess().getValueVariableIDTerminalRuleCall_1_1_0_1()); }
		)
		{ after(grammarAccess.getPrimaryAccess().getValueVariableCrossReference_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__ValueAssignment_2_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getValueExpressionParserRuleCall_2_2_0()); }
		ruleExpression
		{ after(grammarAccess.getPrimaryAccess().getValueExpressionParserRuleCall_2_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
