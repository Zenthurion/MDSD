/*
 * generated by Xtext 2.16.0
 */
package dk.sdu.mdsd.serializer;

import com.google.inject.Inject;
import dk.sdu.mdsd.mathInterpreter.Bracket;
import dk.sdu.mdsd.mathInterpreter.Divide;
import dk.sdu.mdsd.mathInterpreter.Expression;
import dk.sdu.mdsd.mathInterpreter.MathInterpreterPackage;
import dk.sdu.mdsd.mathInterpreter.Minus;
import dk.sdu.mdsd.mathInterpreter.Multiply;
import dk.sdu.mdsd.mathInterpreter.MultiplyOrDivide;
import dk.sdu.mdsd.mathInterpreter.Num;
import dk.sdu.mdsd.mathInterpreter.Plus;
import dk.sdu.mdsd.mathInterpreter.PlusOrMinus;
import dk.sdu.mdsd.mathInterpreter.Solution;
import dk.sdu.mdsd.mathInterpreter.Variable;
import dk.sdu.mdsd.mathInterpreter.VariableRef;
import dk.sdu.mdsd.services.MathInterpreterGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class MathInterpreterSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MathInterpreterGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MathInterpreterPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MathInterpreterPackage.BRACKET:
				sequence_Primary(context, (Bracket) semanticObject); 
				return; 
			case MathInterpreterPackage.DIVIDE:
				sequence_MultiplyOrDivide(context, (Divide) semanticObject); 
				return; 
			case MathInterpreterPackage.EXPRESSION:
				sequence_Expression(context, (Expression) semanticObject); 
				return; 
			case MathInterpreterPackage.MINUS:
				sequence_PlusOrMinus(context, (Minus) semanticObject); 
				return; 
			case MathInterpreterPackage.MULTIPLY:
				sequence_MultiplyOrDivide(context, (Multiply) semanticObject); 
				return; 
			case MathInterpreterPackage.MULTIPLY_OR_DIVIDE:
				sequence_MultiplyOrDivide(context, (MultiplyOrDivide) semanticObject); 
				return; 
			case MathInterpreterPackage.NUM:
				sequence_Primary(context, (Num) semanticObject); 
				return; 
			case MathInterpreterPackage.PLUS:
				sequence_PlusOrMinus(context, (Plus) semanticObject); 
				return; 
			case MathInterpreterPackage.PLUS_OR_MINUS:
				sequence_PlusOrMinus(context, (PlusOrMinus) semanticObject); 
				return; 
			case MathInterpreterPackage.SOLUTION:
				sequence_Solution(context, (Solution) semanticObject); 
				return; 
			case MathInterpreterPackage.VARIABLE:
				sequence_Variable(context, (Variable) semanticObject); 
				return; 
			case MathInterpreterPackage.VARIABLE_REF:
				sequence_Primary(context, (VariableRef) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Expression returns Expression
	 *
	 * Constraint:
	 *     exp=PlusOrMinus
	 */
	protected void sequence_Expression(ISerializationContext context, Expression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathInterpreterPackage.Literals.EXPRESSION__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathInterpreterPackage.Literals.EXPRESSION__EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionAccess().getExpPlusOrMinusParserRuleCall_0(), semanticObject.getExp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MultiplyOrDivide returns Divide
	 *     MultiplyOrDivide.Multiply_1_0_0 returns Divide
	 *     MultiplyOrDivide.Divide_1_1_0 returns Divide
	 *
	 * Constraint:
	 *     (left=MultiplyOrDivide_Divide_1_1_0 operator='/' right=Primary)
	 */
	protected void sequence_MultiplyOrDivide(ISerializationContext context, Divide semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathInterpreterPackage.Literals.MULTIPLY_OR_DIVIDE__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathInterpreterPackage.Literals.MULTIPLY_OR_DIVIDE__LEFT));
			if (transientValues.isValueTransient(semanticObject, MathInterpreterPackage.Literals.MULTIPLY_OR_DIVIDE__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathInterpreterPackage.Literals.MULTIPLY_OR_DIVIDE__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, MathInterpreterPackage.Literals.MULTIPLY_OR_DIVIDE__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathInterpreterPackage.Literals.MULTIPLY_OR_DIVIDE__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMultiplyOrDivideAccess().getDivideLeftAction_1_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getMultiplyOrDivideAccess().getOperatorSolidusKeyword_1_1_1_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getMultiplyOrDivideAccess().getRightPrimaryParserRuleCall_1_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MultiplyOrDivide returns Multiply
	 *     MultiplyOrDivide.Multiply_1_0_0 returns Multiply
	 *     MultiplyOrDivide.Divide_1_1_0 returns Multiply
	 *
	 * Constraint:
	 *     (left=MultiplyOrDivide_Multiply_1_0_0 operator='*' right=Primary)
	 */
	protected void sequence_MultiplyOrDivide(ISerializationContext context, Multiply semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathInterpreterPackage.Literals.MULTIPLY_OR_DIVIDE__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathInterpreterPackage.Literals.MULTIPLY_OR_DIVIDE__LEFT));
			if (transientValues.isValueTransient(semanticObject, MathInterpreterPackage.Literals.MULTIPLY_OR_DIVIDE__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathInterpreterPackage.Literals.MULTIPLY_OR_DIVIDE__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, MathInterpreterPackage.Literals.MULTIPLY_OR_DIVIDE__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathInterpreterPackage.Literals.MULTIPLY_OR_DIVIDE__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMultiplyOrDivideAccess().getMultiplyLeftAction_1_0_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getMultiplyOrDivideAccess().getOperatorAsteriskKeyword_1_0_1_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getMultiplyOrDivideAccess().getRightPrimaryParserRuleCall_1_0_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MultiplyOrDivide returns MultiplyOrDivide
	 *     MultiplyOrDivide.Multiply_1_0_0 returns MultiplyOrDivide
	 *     MultiplyOrDivide.Divide_1_1_0 returns MultiplyOrDivide
	 *
	 * Constraint:
	 *     left=Primary
	 */
	protected void sequence_MultiplyOrDivide(ISerializationContext context, MultiplyOrDivide semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathInterpreterPackage.Literals.MULTIPLY_OR_DIVIDE__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathInterpreterPackage.Literals.MULTIPLY_OR_DIVIDE__LEFT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMultiplyOrDivideAccess().getLeftPrimaryParserRuleCall_0_0(), semanticObject.getLeft());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PlusOrMinus returns Minus
	 *     PlusOrMinus.Plus_1_0_0 returns Minus
	 *     PlusOrMinus.Minus_1_1_0 returns Minus
	 *
	 * Constraint:
	 *     (left=PlusOrMinus_Minus_1_1_0 operator='-' right=MultiplyOrDivide)
	 */
	protected void sequence_PlusOrMinus(ISerializationContext context, Minus semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathInterpreterPackage.Literals.PLUS_OR_MINUS__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathInterpreterPackage.Literals.PLUS_OR_MINUS__LEFT));
			if (transientValues.isValueTransient(semanticObject, MathInterpreterPackage.Literals.PLUS_OR_MINUS__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathInterpreterPackage.Literals.PLUS_OR_MINUS__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, MathInterpreterPackage.Literals.PLUS_OR_MINUS__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathInterpreterPackage.Literals.PLUS_OR_MINUS__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPlusOrMinusAccess().getMinusLeftAction_1_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getPlusOrMinusAccess().getOperatorHyphenMinusKeyword_1_1_1_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getPlusOrMinusAccess().getRightMultiplyOrDivideParserRuleCall_1_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PlusOrMinus returns Plus
	 *     PlusOrMinus.Plus_1_0_0 returns Plus
	 *     PlusOrMinus.Minus_1_1_0 returns Plus
	 *
	 * Constraint:
	 *     (left=PlusOrMinus_Plus_1_0_0 operator='+' right=MultiplyOrDivide)
	 */
	protected void sequence_PlusOrMinus(ISerializationContext context, Plus semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathInterpreterPackage.Literals.PLUS_OR_MINUS__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathInterpreterPackage.Literals.PLUS_OR_MINUS__LEFT));
			if (transientValues.isValueTransient(semanticObject, MathInterpreterPackage.Literals.PLUS_OR_MINUS__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathInterpreterPackage.Literals.PLUS_OR_MINUS__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, MathInterpreterPackage.Literals.PLUS_OR_MINUS__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathInterpreterPackage.Literals.PLUS_OR_MINUS__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPlusOrMinusAccess().getPlusLeftAction_1_0_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getPlusOrMinusAccess().getOperatorPlusSignKeyword_1_0_1_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getPlusOrMinusAccess().getRightMultiplyOrDivideParserRuleCall_1_0_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PlusOrMinus returns PlusOrMinus
	 *     PlusOrMinus.Plus_1_0_0 returns PlusOrMinus
	 *     PlusOrMinus.Minus_1_1_0 returns PlusOrMinus
	 *
	 * Constraint:
	 *     left=MultiplyOrDivide
	 */
	protected void sequence_PlusOrMinus(ISerializationContext context, PlusOrMinus semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathInterpreterPackage.Literals.PLUS_OR_MINUS__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathInterpreterPackage.Literals.PLUS_OR_MINUS__LEFT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPlusOrMinusAccess().getLeftMultiplyOrDivideParserRuleCall_0_0(), semanticObject.getLeft());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Primary returns Bracket
	 *
	 * Constraint:
	 *     value=Expression
	 */
	protected void sequence_Primary(ISerializationContext context, Bracket semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathInterpreterPackage.Literals.BRACKET__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathInterpreterPackage.Literals.BRACKET__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrimaryAccess().getValueExpressionParserRuleCall_2_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Primary returns Num
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_Primary(ISerializationContext context, Num semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathInterpreterPackage.Literals.NUM__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathInterpreterPackage.Literals.NUM__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrimaryAccess().getValueINTTerminalRuleCall_0_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Primary returns VariableRef
	 *
	 * Constraint:
	 *     value=[Variable|ID]
	 */
	protected void sequence_Primary(ISerializationContext context, VariableRef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathInterpreterPackage.Literals.VARIABLE_REF__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathInterpreterPackage.Literals.VARIABLE_REF__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrimaryAccess().getValueVariableIDTerminalRuleCall_1_1_0_1(), semanticObject.eGet(MathInterpreterPackage.Literals.VARIABLE_REF__VALUE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Solution returns Solution
	 *
	 * Constraint:
	 *     (variables+=Variable* expression=Expression)
	 */
	protected void sequence_Solution(ISerializationContext context, Solution semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Variable returns Variable
	 *
	 * Constraint:
	 *     (name=ID value=Expression)
	 */
	protected void sequence_Variable(ISerializationContext context, Variable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathInterpreterPackage.Literals.VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathInterpreterPackage.Literals.VARIABLE__NAME));
			if (transientValues.isValueTransient(semanticObject, MathInterpreterPackage.Literals.VARIABLE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathInterpreterPackage.Literals.VARIABLE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getVariableAccess().getValueExpressionParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
}
