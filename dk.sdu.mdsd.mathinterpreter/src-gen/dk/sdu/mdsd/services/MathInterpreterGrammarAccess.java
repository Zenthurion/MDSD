/*
 * generated by Xtext 2.16.0
 */
package dk.sdu.mdsd.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MathInterpreterGrammarAccess extends AbstractGrammarElementFinder {
	
	public class SolutionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.MathInterpreter.Solution");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cGivenKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cVariablesAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cVariablesVariableParserRuleCall_0_1_0 = (RuleCall)cVariablesAssignment_0_1.eContents().get(0);
		private final Keyword cSolveKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//Solution:
		//	('given'
		//	variables+=Variable*)?
		//	'solve'
		//	expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//('given' variables+=Variable*)? 'solve' expression=Expression
		public Group getGroup() { return cGroup; }
		
		//('given' variables+=Variable*)?
		public Group getGroup_0() { return cGroup_0; }
		
		//'given'
		public Keyword getGivenKeyword_0_0() { return cGivenKeyword_0_0; }
		
		//variables+=Variable*
		public Assignment getVariablesAssignment_0_1() { return cVariablesAssignment_0_1; }
		
		//Variable
		public RuleCall getVariablesVariableParserRuleCall_0_1_0() { return cVariablesVariableParserRuleCall_0_1_0; }
		
		//'solve'
		public Keyword getSolveKeyword_1() { return cSolveKeyword_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.MathInterpreter.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Variable:
		//	name=ID '=' value=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '=' value=Expression
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=Expression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.MathInterpreter.Expression");
		private final Assignment cExpAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpPlusOrMinusParserRuleCall_0 = (RuleCall)cExpAssignment.eContents().get(0);
		
		//Expression:
		//	exp=PlusOrMinus;
		@Override public ParserRule getRule() { return rule; }
		
		//exp=PlusOrMinus
		public Assignment getExpAssignment() { return cExpAssignment; }
		
		//PlusOrMinus
		public RuleCall getExpPlusOrMinusParserRuleCall_0() { return cExpPlusOrMinusParserRuleCall_0; }
	}
	public class PlusOrMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.MathInterpreter.PlusOrMinus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftMultiplyOrDivideParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Keyword cOperatorPlusSignKeyword_1_0_1_0 = (Keyword)cOperatorAssignment_1_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightMultiplyOrDivideParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cMinusLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final Keyword cOperatorHyphenMinusKeyword_1_1_1_0 = (Keyword)cOperatorAssignment_1_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightMultiplyOrDivideParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		
		//PlusOrMinus:
		//	left=MultiplyOrDivide ({Plus.left=current} operator='+' right=MultiplyOrDivide | {Minus.left=current} operator='-'
		//	right=MultiplyOrDivide)*;
		@Override public ParserRule getRule() { return rule; }
		
		//left=MultiplyOrDivide ({Plus.left=current} operator='+' right=MultiplyOrDivide | {Minus.left=current} operator='-'
		//right=MultiplyOrDivide)*
		public Group getGroup() { return cGroup; }
		
		//left=MultiplyOrDivide
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//MultiplyOrDivide
		public RuleCall getLeftMultiplyOrDivideParserRuleCall_0_0() { return cLeftMultiplyOrDivideParserRuleCall_0_0; }
		
		//({Plus.left=current} operator='+' right=MultiplyOrDivide | {Minus.left=current} operator='-' right=MultiplyOrDivide)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//{Plus.left=current} operator='+' right=MultiplyOrDivide
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0() { return cPlusLeftAction_1_0_0; }
		
		//operator='+'
		public Assignment getOperatorAssignment_1_0_1() { return cOperatorAssignment_1_0_1; }
		
		//'+'
		public Keyword getOperatorPlusSignKeyword_1_0_1_0() { return cOperatorPlusSignKeyword_1_0_1_0; }
		
		//right=MultiplyOrDivide
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//MultiplyOrDivide
		public RuleCall getRightMultiplyOrDivideParserRuleCall_1_0_2_0() { return cRightMultiplyOrDivideParserRuleCall_1_0_2_0; }
		
		//{Minus.left=current} operator='-' right=MultiplyOrDivide
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{Minus.left=current}
		public Action getMinusLeftAction_1_1_0() { return cMinusLeftAction_1_1_0; }
		
		//operator='-'
		public Assignment getOperatorAssignment_1_1_1() { return cOperatorAssignment_1_1_1; }
		
		//'-'
		public Keyword getOperatorHyphenMinusKeyword_1_1_1_0() { return cOperatorHyphenMinusKeyword_1_1_1_0; }
		
		//right=MultiplyOrDivide
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }
		
		//MultiplyOrDivide
		public RuleCall getRightMultiplyOrDivideParserRuleCall_1_1_2_0() { return cRightMultiplyOrDivideParserRuleCall_1_1_2_0; }
	}
	public class MultiplyOrDivideElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.MathInterpreter.MultiplyOrDivide");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftPrimaryParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cMultiplyLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Keyword cOperatorAsteriskKeyword_1_0_1_0 = (Keyword)cOperatorAssignment_1_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cDivideLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final Keyword cOperatorSolidusKeyword_1_1_1_0 = (Keyword)cOperatorAssignment_1_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		
		//MultiplyOrDivide:
		//	left=Primary ({Multiply.left=current} operator='*' right=Primary | {Divide.left=current} operator='/'
		//	right=Primary)*;
		@Override public ParserRule getRule() { return rule; }
		
		//left=Primary ({Multiply.left=current} operator='*' right=Primary | {Divide.left=current} operator='/' right=Primary)*
		public Group getGroup() { return cGroup; }
		
		//left=Primary
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//Primary
		public RuleCall getLeftPrimaryParserRuleCall_0_0() { return cLeftPrimaryParserRuleCall_0_0; }
		
		//({Multiply.left=current} operator='*' right=Primary | {Divide.left=current} operator='/' right=Primary)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//{Multiply.left=current} operator='*' right=Primary
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Multiply.left=current}
		public Action getMultiplyLeftAction_1_0_0() { return cMultiplyLeftAction_1_0_0; }
		
		//operator='*'
		public Assignment getOperatorAssignment_1_0_1() { return cOperatorAssignment_1_0_1; }
		
		//'*'
		public Keyword getOperatorAsteriskKeyword_1_0_1_0() { return cOperatorAsteriskKeyword_1_0_1_0; }
		
		//right=Primary
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_0_2_0() { return cRightPrimaryParserRuleCall_1_0_2_0; }
		
		//{Divide.left=current} operator='/' right=Primary
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{Divide.left=current}
		public Action getDivideLeftAction_1_1_0() { return cDivideLeftAction_1_1_0; }
		
		//operator='/'
		public Assignment getOperatorAssignment_1_1_1() { return cOperatorAssignment_1_1_1; }
		
		//'/'
		public Keyword getOperatorSolidusKeyword_1_1_1_0() { return cOperatorSolidusKeyword_1_1_1_0; }
		
		//right=Primary
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_1_2_0() { return cRightPrimaryParserRuleCall_1_1_2_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.MathInterpreter.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNumAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cVariableRefAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cValueVariableCrossReference_1_1_0 = (CrossReference)cValueAssignment_1_1.eContents().get(0);
		private final RuleCall cValueVariableIDTerminalRuleCall_1_1_0_1 = (RuleCall)cValueVariableCrossReference_1_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cBracketAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cValueAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_2_0 = (RuleCall)cValueAssignment_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//Primary:
		//	{Num} value=INT | {VariableRef} value=[Variable] | {Bracket} '(' value=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Num} value=INT | {VariableRef} value=[Variable] | {Bracket} '(' value=Expression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Num} value=INT
		public Group getGroup_0() { return cGroup_0; }
		
		//{Num}
		public Action getNumAction_0_0() { return cNumAction_0_0; }
		
		//value=INT
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_1_0() { return cValueINTTerminalRuleCall_0_1_0; }
		
		//{VariableRef} value=[Variable]
		public Group getGroup_1() { return cGroup_1; }
		
		//{VariableRef}
		public Action getVariableRefAction_1_0() { return cVariableRefAction_1_0; }
		
		//value=[Variable]
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//[Variable]
		public CrossReference getValueVariableCrossReference_1_1_0() { return cValueVariableCrossReference_1_1_0; }
		
		//ID
		public RuleCall getValueVariableIDTerminalRuleCall_1_1_0_1() { return cValueVariableIDTerminalRuleCall_1_1_0_1; }
		
		//{Bracket} '(' value=Expression ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//{Bracket}
		public Action getBracketAction_2_0() { return cBracketAction_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }
		
		//value=Expression
		public Assignment getValueAssignment_2_2() { return cValueAssignment_2_2; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_2_0() { return cValueExpressionParserRuleCall_2_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}
	
	
	private final SolutionElements pSolution;
	private final VariableElements pVariable;
	private final ExpressionElements pExpression;
	private final PlusOrMinusElements pPlusOrMinus;
	private final MultiplyOrDivideElements pMultiplyOrDivide;
	private final PrimaryElements pPrimary;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MathInterpreterGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSolution = new SolutionElements();
		this.pVariable = new VariableElements();
		this.pExpression = new ExpressionElements();
		this.pPlusOrMinus = new PlusOrMinusElements();
		this.pMultiplyOrDivide = new MultiplyOrDivideElements();
		this.pPrimary = new PrimaryElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("dk.sdu.mdsd.MathInterpreter".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Solution:
	//	('given'
	//	variables+=Variable*)?
	//	'solve'
	//	expression=Expression;
	public SolutionElements getSolutionAccess() {
		return pSolution;
	}
	
	public ParserRule getSolutionRule() {
		return getSolutionAccess().getRule();
	}
	
	//Variable:
	//	name=ID '=' value=Expression;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//Expression:
	//	exp=PlusOrMinus;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//PlusOrMinus:
	//	left=MultiplyOrDivide ({Plus.left=current} operator='+' right=MultiplyOrDivide | {Minus.left=current} operator='-'
	//	right=MultiplyOrDivide)*;
	public PlusOrMinusElements getPlusOrMinusAccess() {
		return pPlusOrMinus;
	}
	
	public ParserRule getPlusOrMinusRule() {
		return getPlusOrMinusAccess().getRule();
	}
	
	//MultiplyOrDivide:
	//	left=Primary ({Multiply.left=current} operator='*' right=Primary | {Divide.left=current} operator='/'
	//	right=Primary)*;
	public MultiplyOrDivideElements getMultiplyOrDivideAccess() {
		return pMultiplyOrDivide;
	}
	
	public ParserRule getMultiplyOrDivideRule() {
		return getMultiplyOrDivideAccess().getRule();
	}
	
	//Primary:
	//	{Num} value=INT | {VariableRef} value=[Variable] | {Bracket} '(' value=Expression ')';
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
